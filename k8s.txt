#k8s is just management layer
#can not create images with k8s

#in k8s relation is master and node
#master has these components but nodes dont have these
https://github.com/lerndevops/labs/tree/master/kubernetes
    api-server,
    scheduler
    controller  manager
    etcd

api-server is principle component which takes requests from clients
schedular identifies the perfect node to create container
controller manager maintain your desiered state, eg. 10 conatiner
etcd - small databse, all k8s info saved in this database

api server needs agent on node, 
    called as kublets(takes instruction from api-server and reports back to api server)

 Every node need docker

 command line utility kubectl, run on master machine, goes to api server

 ## Install Docker

sudo wget https://raw.githubusercontent.com/lerndevops/labs/master/scripts/installDocker.sh -P /tmp
sudo chmod 755 /tmp/installDocker.sh
sudo bash /tmp/installDocker.sh

## Install kubeadm,kubelet,kubectl

sudo wget https://raw.githubusercontent.com/lerndevops/labs/master/scripts/installK8S-v1-23.sh -P /tmp
sudo chmod 755 /tmp/installK8S-v1-23.sh
sudo bash /tmp/installK8S-v1-23.sh

## Initialize kubernetes Master Node
 
   sudo kubeadm init --ignore-preflight-errors=all

   sudo mkdir -p $HOME/.kube
   sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
   sudo chown $(id -u):$(id -g) $HOME/.kube/config

#k8s not giving networking by default

   ## install networking driver -- Weave/flannel/canal/calico etc... 
   #copied from weave site
    kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml

   ## below installs weave networking driver 
    
   sudo kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.24.1/manifests/calico.yaml

   # Validate:  kubectl get nodes

   now install token all nodes

   #explanation of pods
   kubectl explain pod

   #how to create pods
   kubectl run pod1 --image ngnix

   #get pod list
   kubectl get pods
   kubectl get pods -o wide
   kubectl describe pod <podname>  #in our case its pod1

   #delete pod
   kubectl delete pod <podname>

   #create pod by declarative syntax
   vi mypod.yml

   #create pod using yml
   kubectl create -f mypod.yml 

   #if we dont know the syntax of yml then you can try this command
   kubectl run pod1 --image nginx --dry-run=client -o yaml


   #how to enter into pod
   kubectl exec -it pod1 --bash #you will inside that container/pod
   ctrl+pq to come out of pod


   #delete all pods
   kubectl delete pods --all

   #explain replicaset
   kubectl explain replicaset

   #create replicaset
   kubectl create -f replicaset.yml

   #get list of replicas
   kubectl get rs

   #get pod
   kubectl get pods

   #if we delete pod, kubernetis will create another pod to maintain desiered state of number of replicas
   #how to delete pod
   kubectl delete pod <podid>


   #how to scale replicas
   kubectl scale rs <replicaset name>  --replicas 5
#then see pods list
kubectl get pods #it will list 5 pods

#scale down replicas
kubectl scale rs <replicaset name>  --replicas 2

#then see pods list
kubectl get pods #it will list 2 pods

#how ro check events on replicaset
kubectl describe rs <replica name>

#how to delete replica set
kubectl delete rs <replica name>

#how to access the application from pods, to outside world
kubectl get pods -o wide # it will display ip address

#how to check, check it with curl, use port numbers ngnix, apache 80, tomcat 8080 etc
curl <ip>:<port>

#but for outside world , these pods ip will not accessible, 
   so we need one service object, this service object publish port named as nodeport
   then master or node can access application on nodeport
   service will have its own IP and its own port number

#how to expose service
kubectl expose pod <podname> --name <servicename, eg, sc1> --port 1234 --target-port 80 --type NodePort
#it will give output as 
service/sc1 #here sc1 is service name

#default node port range is 30000 to 32767

#describe the kubectl service
kubectl describe svc svc1

#when we want to create  replicaset and service at a time, then we need to add yml and separate it by "----"

#get all resources in cluster
kubectl get all

#delete all
kubectl delete --all

#but it is risk to delete all, we might delete other's pod also in orgnisation
#so there is concept of namespace
#by default we can see only content in default name space
#to list all namespace, command is
kubectl get ns

#All the system level pods are available in kube-system
#if we want to fecth pods of any specific namespace then command is
kubectl get pods -n kube-system

#how to create namespace
kubectl create ns jyotinamespace

#how to create pod in specific namespace
kubectl run nginxpodbyjyoti --image nginx -n jyotinamespace

#delete namespace
kubectl delete ns jyotinamespace









    









   




